"""
AI service for chat functionality using Google Gemini AI with Multi-Language Support.
Supports English, Bengali/Bangla, Malayalam, Hindi, Tamil, Telugu, and more.
"""

import os
import json
import logging
import time
from datetime import datetime
from typing import Dict, Any, List, Optional
import google.generativeai as genai
from django.conf import settings
import re

logger = logging.getLogger(__name__)

class MultiLangGeminiChatService:
    """Enhanced service for handling AI chat interactions with multi-language support."""
    
    def __init__(self):
        self.model = None
        self._initialized = False
        
        # Language detection patterns
        self.language_patterns = {
            'bengali': [
                'рж╣рзНржпрж╛рж▓рзЛ', 'рж╣рж╛ржЗ', 'ржХрзЗржоржи ржЖржЫрзЗржи', 'рж╕рж╣рж╛ржпрж╝рждрж╛', 'рж╕рзНржХрж┐ржо', 'ржпрзЛржЬржирж╛', 'рж╕рж░ржХрж╛рж░рж┐', 
                'ржЖржмрж╛рж╕ржи', 'ржмрж╛ржбрж╝рж┐', 'ржХрзГрж╖рж┐', 'ржЪрж╛рж╖рж╛ржмрж╛ржж', 'рж╕рзНржмрж╛рж╕рзНржерзНржп', 'ржЪрж┐ржХрж┐рзОрж╕рж╛', 'ржмрзНржпржмрж╕рж╛',
                'ржЖржорж┐', 'ржЖржкржирж┐', 'ржХрж┐', 'ржХрзАржнрж╛ржмрзЗ', 'ржХрзЛржерж╛ржпрж╝', 'ржХржЦржи'
            ],
            'malayalam': [
                'р┤╣р┤▓р╡Л', 'р┤╣р┤╛р┤пр╡Н', 'р┤Ор┤Щр╡Нр┤Щр┤ир╡Жр┤пр╡Бр┤гр╡Нр┤Яр╡Н', 'р┤╕р┤╣р┤╛р┤пр┤В', 'р┤кр┤жр╡Нр┤зр┤др┤┐', 'р┤╕р╡╝р┤Хр╡Нр┤Хр┤╛р╡╝',
                'р┤╡р╡Ар┤Яр╡Н', 'р┤Хр╡Гр┤╖р┤┐', 'р┤Жр┤░р╡Лр┤Чр╡Нр┤пр┤В', 'р┤Ър┤┐р┤Хр┤┐р┤др╡Нр┤╕', 'р┤мр┤┐р┤╕р┤┐р┤ир┤╕р╡Нр┤╕р╡Н', 'р┤╡р╡Нр┤пр┤╛р┤кр┤╛р┤░р┤В',
                'р┤Юр┤╛р╡╗', 'р┤ир┤┐р┤Щр╡Нр┤Щр╡╛', 'р┤Ор┤ир╡Нр┤др╡Н', 'р┤Ор┤Щр╡Нр┤Щр┤ир╡Ж', 'р┤Ор┤╡р┤┐р┤Яр╡Ж', 'р┤Ор┤кр╡Нр┤кр╡Лр╡╛'
            ],
            'hindi': [
                'рд╣реИрд▓реЛ', 'рдирдорд╕реНрддреЗ', 'рдХреИрд╕реЗ рд╣реИрдВ', 'рд╕рд╣рд╛рдпрддрд╛', 'рдпреЛрдЬрдирд╛', 'рд╕рд░рдХрд╛рд░реА',
                'рдЖрд╡рд╛рд╕', 'рдШрд░', 'рдХреГрд╖рд┐', 'рдЦреЗрддреА', 'рд╕реНрд╡рд╛рд╕реНрдереНрдп', 'рдЗрд▓рд╛рдЬ', 'рд╡реНрдпрд╛рдкрд╛рд░',
                'рдореИрдВ', 'рдЖрдк', 'рдХреНрдпрд╛', 'рдХреИрд╕реЗ', 'рдХрд╣рд╛рдБ', 'рдХрдм'
            ],
            'tamil': [
                'ро╡рогроХрпНроХроорпН', 'ро╣ро▓рпЛ', 'роОрокрпНрокроЯро┐ роЗро░рпБроХрпНроХрпАроЩрпНроХ', 'роЙродро╡ро┐', 'родро┐роЯрпНроЯроорпН', 'роЕро░роЪрпБ',
                'ро╡рпАроЯрпБ', 'ро╡ро┐ро╡роЪро╛ропроорпН', 'роЙроЯро▓рпНроиро▓роорпН', 'роЪро┐роХро┐роЪрпНроЪрпИ', 'ро╡рогро┐роХроорпН',
                'роиро╛ройрпН', 'роирпАроЩрпНроХро│рпН', 'роОройрпНрой', 'роОрокрпНрокроЯро┐', 'роОроЩрпНроХрпЗ', 'роОрокрпНрокрпЛродрпБ'
            ],
            'telugu': [
                'р░╣р░▓р▒Л', 'р░ир░ор░╕р▒Нр░Хр░╛р░░р░В', 'р░Ор░▓р░╛ р░Йр░ир▒Нр░ир░╛р░░р▒Б', 'р░╕р░╣р░╛р░пр░В', 'р░кр░ер░Хр░В', 'р░кр▒Нр░░р░нр▒Бр░др▒Нр░╡р░В',
                'р░Зр░▓р▒Нр░▓р▒Б', 'р░╡р▒Нр░пр░╡р░╕р░╛р░пр░В', 'р░Жр░░р▒Лр░Чр▒Нр░пр░В', 'р░Ър░┐р░Хр░┐р░др▒Нр░╕', 'р░╡р▒Нр░пр░╛р░кр░╛р░░р░В',
                'р░ир▒Зр░ир▒Б', 'р░ор▒Ар░░р▒Б', 'р░Пр░ор░┐р░Яр░┐', 'р░Ор░▓р░╛', 'р░Ор░Хр▒Нр░Хр░б', 'р░Ор░кр▒Нр░кр▒Бр░бр▒Б'
            ]
        }
        
        # Multi-language system prompt
        self.system_prompt = """AGSA AI: Multi-Language Government Services Assistant

Your job: Analyze user intent in any language (English, Bengali/Bangla, Malayalam, Hindi, Tamil, Telugu) and create action plans for Indian government schemes.

IMPORTANT LANGUAGE RULES:
1. Detect the user's language from their message
2. ALWAYS respond in the SAME language as the user's input
3. If user writes in Bengali, respond in Bengali
4. If user writes in Malayalam, respond in Malayalam  
5. If user writes in English, respond in English
6. If mixed languages, use the primary language detected

Categories you can search (in any language):
- "healthcare" (рж╕рзНржмрж╛рж╕рзНржерзНржп, р┤Жр┤░р╡Лр┤Чр╡Нр┤пр┤В, рд╕реНрд╡рд╛рд╕реНрдереНрдп, роЙроЯро▓рпНроиро▓роорпН, р░Жр░░р▒Лр░Чр▒Нр░пр░В)
- "education" (рж╢рж┐ржХрзНрж╖рж╛, р┤╡р┤┐р┤жр╡Нр┤пр┤╛р┤нр╡Нр┤пр┤╛р┤╕р┤В, рд╢рд┐рдХреНрд╖рд╛, роХро▓рпНро╡ро┐, р░╡р░┐р░жр▒Нр░п)
- "agriculture" (ржХрзГрж╖рж┐, р┤Хр╡Гр┤╖р┤┐, рдХреГрд╖рд┐, ро╡ро┐ро╡роЪро╛ропроорпН, р░╡р▒Нр░пр░╡р░╕р░╛р░пр░В)
- "employment" (ржЪрж╛ржХрж░рж┐, р┤Ьр╡Лр┤▓р┤┐, рд░реЛрдЬрдЧрд╛рд░, ро╡рпЗро▓рпИ, р░Йр░жр▒Нр░пр▒Лр░Чр░В)
- "housing" (ржЖржмрж╛рж╕ржи, р┤╡р╡Ар┤Яр╡Н, рдЖрд╡рд╛рд╕, ро╡рпАроЯрпБ, р░Зр░▓р▒Нр░▓р▒Б)
- "financial_inclusion" (ржЖрж░рзНржерж┐ржХ, р┤╕р┤╛р┤ор╡Нр┤кр┤др╡Нр┤др┤┐р┤Х, рд╡рд┐рддреНрддреАрдп, роиро┐родро┐, р░Жр░░р▒Нр░ер░┐р░Х)

JSON response format (keep field names in English but content in user's language):
{
    "category": "SCHEME_SEARCH|ASK|ELIGIBILITY",
    "intent": "brief description in user's language",
    "confidence": 0.9,
    "language_detected": "bengali|malayalam|hindi|tamil|telugu|english",
    "response": "Response text in user's language",
    "action_plan": ["steps in user's language"],
    "search_params": {
        "scheme_category": "healthcare",
        "keywords": ["health", "medical"],
        "limit": 10
    },
    "required_documents": ["documents in user's language"],
    "eligible_schemes": ["scheme names in user's language"],
    "next_steps": "Next steps in user's language"
}

CRITICAL: Always respond in the user's input language. Bengali users get Bengali responses, Malayalam users get Malayalam responses, etc.
"""

        # Multi-language fallback responses
        self.fallback_responses = {
            'english': {
                'greeting': {
                    "category": "ASK",
                    "intent": "greeting", 
                    "confidence": 0.9,
                    "language_detected": "english",
                    "response": """ЁЯСЛ Hello! Welcome to AGSA - Your Government Services Assistant!

I'm here to help you navigate government schemes and services. I can assist you in multiple languages including English, Bengali, Malayalam, Hindi, Tamil, and Telugu.

ЁЯПа **HOUSING SCHEMES**: Pradhan Mantri Awas Yojana (PMAY)
ЁЯМ╛ **AGRICULTURE SCHEMES**: PM-KISAN Samman Nidhi  
ЁЯПе **HEALTHCARE SCHEMES**: Ayushman Bharat PM-JAY
ЁЯТ╝ **BUSINESS & EMPLOYMENT**: Pradhan Mantri Mudra Yojana
ЁЯУЪ **EDUCATION SCHEMES**: Scholarship Programs

**What would you like assistance with today?**
You can ask me in your preferred language!""",
                    "action_plan": ["Browse available schemes", "Check eligibility", "Get application guidance"],
                    "required_documents": [],
                    "eligible_schemes": [],
                    "next_steps": "Tell me which category interests you or ask in your preferred language"
                }
            },
            'bengali': {
                'greeting': {
                    "category": "ASK",
                    "intent": "рж╢рзБржнрзЗржЪрзНржЫрж╛",
                    "confidence": 0.9, 
                    "language_detected": "bengali",
                    "response": """ЁЯСЛ рж╣рзНржпрж╛рж▓рзЛ! AGSA-рждрзЗ рж╕рзНржмрж╛ржЧрждржо - ржЖржкржирж╛рж░ рж╕рж░ржХрж╛рж░рж┐ рж╕рзЗржмрж╛ рж╕рж╣рж╛ржпрж╝ржХ!

ржЖржорж┐ ржЖржкржирж╛ржХрзЗ рж╕рж░ржХрж╛рж░рж┐ ржпрзЛржЬржирж╛ ржПржмржВ рж╕рзЗржмрж╛ ржирзЗржнрж┐ржЧрзЗржЯ ржХрж░рждрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржПржЦрж╛ржирзЗ ржЖржЫрж┐ред ржЖржорж┐ ржПржХрж╛ржзрж┐ржХ ржнрж╛рж╖рж╛ржпрж╝ рж╕рж╣рж╛ржпрж╝рждрж╛ ржкрзНрж░ржжрж╛ржи ржХрж░рждрзЗ ржкрж╛рж░рж┐ред

ЁЯПа **ржЖржмрж╛рж╕ржи ржпрзЛржЬржирж╛**: ржкрзНрж░ржзрж╛ржиржоржирзНрждрзНрж░рзА ржЖржмрж╛рж╕ ржпрзЛржЬржирж╛ (PMAY)
ЁЯМ╛ **ржХрзГрж╖рж┐ ржпрзЛржЬржирж╛**: PM-KISAN рж╕ржорзНржорж╛ржи ржирж┐ржзрж┐
ЁЯПе **рж╕рзНржмрж╛рж╕рзНржерзНржпрж╕рзЗржмрж╛ ржпрзЛржЬржирж╛**: ржЖржпрж╝рзБрж╖рзНржорж╛ржи ржнрж╛рж░ржд PM-JAY  
ЁЯТ╝ **ржмрзНржпржмрж╕рж╛ ржУ ржХрж░рзНржорж╕ржВрж╕рзНржерж╛ржи**: ржкрзНрж░ржзрж╛ржиржоржирзНрждрзНрж░рзА ржорзБржжрзНрж░рж╛ ржпрзЛржЬржирж╛
ЁЯУЪ **рж╢рж┐ржХрзНрж╖рж╛ ржпрзЛржЬржирж╛**: ржмрзГрждрзНрждрж┐ ржХрж░рзНржорж╕рзВржЪрж┐

**ржЖржЬ ржЖржкржирж╛рж░ ржХрзА рж╕рж╛рж╣рж╛ржпрзНржп ржкрзНрж░ржпрж╝рзЛржЬржи?**
ржЖржкржирж┐ ржмрж╛ржВрж▓рж╛ржпрж╝ ржЖржорж╛ржХрзЗ ржЬрж┐ржЬрзНржЮрж╛рж╕рж╛ ржХрж░рждрзЗ ржкрж╛рж░рзЗржи!""",
                    "action_plan": ["ржЙржкрж▓ржмрзНржз ржпрзЛржЬржирж╛ ржжрзЗржЦрзБржи", "ржпрзЛржЧрзНржпрждрж╛ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рзБржи", "ржЖржмрзЗржжржирзЗрж░ ржирж┐рж░рзНржжрзЗрж╢ржирж╛ ржкрж╛ржи"],
                    "required_documents": [],
                    "eligible_schemes": [],
                    "next_steps": "ржХрзЛржи ржмрж┐ржнрж╛ржЧрзЗ ржЖржкржирж╛рж░ ржЖржЧрзНрж░рж╣ ржЖржЫрзЗ рждрж╛ ржмрж▓рзБржи"
                }
            },
            'malayalam': {
                'greeting': {
                    "category": "ASK",
                    "intent": "р┤Ер┤нр┤┐р┤╡р┤╛р┤жр┤ир┤В",
                    "confidence": 0.9,
                    "language_detected": "malayalam", 
                    "response": """ЁЯСЛ р┤╣р┤▓р╡Л! AGSA-р┤пр┤┐р╡╜ р┤╕р╡Нр┤╡р┤╛р┤Чр┤др┤В - р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤╕р╡╝р┤Хр╡Нр┤Хр┤╛р╡╝ р┤╕р╡Зр┤╡р┤и р┤╕р┤╣р┤╛р┤пр┤┐!

р┤╕р╡╝р┤Хр╡Нр┤Хр┤╛р╡╝ р┤кр┤жр╡Нр┤зр┤др┤┐р┤Хр┤│р╡Бр┤В р┤╕р╡Зр┤╡р┤ир┤Щр╡Нр┤Щр┤│р╡Бр┤В р┤ир┤╛р┤╡р┤┐р┤Чр╡Зр┤▒р╡Нр┤▒р╡Н р┤Ър╡Жр┤пр╡Нр┤пр┤╛р╡╗ р┤Юр┤╛р╡╗ р┤Зр┤╡р┤┐р┤Яр╡Жр┤пр╡Бр┤гр╡Нр┤Яр╡Н. р┤Ор┤ир┤┐р┤Хр╡Нр┤Хр╡Н р┤Тр┤ир╡Нр┤ир┤┐р┤▓р┤зр┤┐р┤Хр┤В р┤нр┤╛р┤╖р┤Хр┤│р┤┐р╡╜ р┤╕р┤╣р┤╛р┤пр┤В р┤ир╡╜р┤Хр┤╛р╡╗ р┤Хр┤┤р┤┐р┤пр╡Бр┤В.

ЁЯПа **р┤нр┤╡р┤и р┤кр┤жр╡Нр┤зр┤др┤┐р┤Хр╡╛**: р┤кр╡Нр┤░р┤зр┤╛р┤ир┤ор┤ир╡Нр┤др╡Нр┤░р┤┐ р┤Жр┤╡р┤╛р┤╕р╡Н р┤пр╡Лр┤Ьр┤и (PMAY)
ЁЯМ╛ **р┤Хр┤╛р╡╝р┤╖р┤┐р┤Х р┤кр┤жр╡Нр┤зр┤др┤┐р┤Хр╡╛**: PM-KISAN р┤╕р┤ор╡Нр┤ор┤╛р╡╗ р┤ир┤┐р┤зр┤┐
ЁЯПе **р┤Жр┤░р╡Лр┤Чр╡Нр┤п р┤кр┤жр╡Нр┤зр┤др┤┐р┤Хр╡╛**: р┤Жр┤пр╡Бр┤╖р╡Нр┤ор┤╛р╡╗ р┤нр┤╛р┤░р┤др╡Н PM-JAY
ЁЯТ╝ **р┤мр┤┐р┤╕р┤┐р┤ир┤╕р╡Нр┤╕р╡Н & р┤др╡Кр┤┤р┤┐р╡╜**: р┤кр╡Нр┤░р┤зр┤╛р┤ир┤ор┤ир╡Нр┤др╡Нр┤░р┤┐ р┤ор╡Бр┤жр╡Нр┤░ р┤пр╡Лр┤Ьр┤и  
ЁЯУЪ **р┤╡р┤┐р┤жр╡Нр┤пр┤╛р┤нр╡Нр┤пр┤╛р┤╕ р┤кр┤жр╡Нр┤зр┤др┤┐р┤Хр╡╛**: р┤╕р╡Нр┤Хр╡Лр┤│р╡╝р┤╖р┤┐р┤кр╡Нр┤кр╡Н р┤кр╡Нр┤░р╡Лр┤Чр╡Нр┤░р┤╛р┤ор╡Бр┤Хр╡╛

**р┤Зр┤ир╡Нр┤ир╡Н р┤ир┤┐р┤Щр╡Нр┤Щр╡╛р┤Хр╡Нр┤Хр╡Н р┤Ор┤ир╡Нр┤др╡Н р┤╕р┤╣р┤╛р┤пр┤В р┤╡р╡Зр┤гр┤В?**
р┤ор┤▓р┤пр┤╛р┤│р┤др╡Нр┤др┤┐р╡╜ р┤Ор┤ир╡Нр┤ир╡Лр┤Яр╡Н р┤Ър╡Лр┤жр┤┐р┤Хр╡Нр┤Хр┤╛р┤╡р╡Бр┤ир╡Нр┤ир┤др┤╛р┤гр╡Н!""",
                    "action_plan": ["р┤▓р┤нр╡Нр┤пр┤ор┤╛р┤п р┤кр┤жр╡Нр┤зр┤др┤┐р┤Хр╡╛ р┤Хр┤╛р┤гр╡Бр┤Х", "р┤пр╡Лр┤Чр╡Нр┤пр┤д р┤кр┤░р┤┐р┤╢р╡Лр┤зр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х", "р┤Ер┤кр╡Зр┤Хр╡Нр┤╖р┤╛ р┤ор┤╛р╡╝р┤Чр╡Нр┤Чр┤ир┤┐р╡╝р┤жр╡Нр┤жр╡Зр┤╢р┤В р┤ир╡Зр┤Яр╡Бр┤Х"],
                    "required_documents": [],
                    "eligible_schemes": [],
                    "next_steps": "р┤Пр┤др╡Н р┤╡р┤┐р┤нр┤╛р┤Чр┤др╡Нр┤др┤┐р╡╜ р┤ир┤┐р┤Щр╡Нр┤Щр╡╛р┤Хр╡Нр┤Хр╡Н р┤др┤╛р╡╜р┤кр╡Нр┤кр┤░р╡Нр┤пр┤ор╡Бр┤гр╡Нр┤Яр╡Жр┤ир╡Нр┤ир╡Н р┤кр┤▒р┤пр╡Бр┤Х"
                }
            },
            'hindi': {
                'greeting': {
                    "category": "ASK", 
                    "intent": "рдирдорд╕реНрдХрд╛рд░",
                    "confidence": 0.9,
                    "language_detected": "hindi",
                    "response": """ЁЯСЛ рдирдорд╕реНрддреЗ! AGSA рдореЗрдВ рд╕реНрд╡рд╛рдЧрдд рд╣реИ - рдЖрдкрдХрд╛ рд╕рд░рдХрд╛рд░реА рд╕реЗрд╡рд╛ рд╕рд╣рд╛рдпрдХ!

рдореИрдВ рдпрд╣рд╛рдБ рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛рдУрдВ рдФрд░ рд╕реЗрд╡рд╛рдУрдВ рдореЗрдВ рдЖрдкрдХреА рдорджрдж рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рд╣реВрдБред рдореИрдВ рдХрдИ рднрд╛рд╖рд╛рдУрдВ рдореЗрдВ рд╕рд╣рд╛рдпрддрд╛ рдкреНрд░рджрд╛рди рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБред

ЁЯПа **рдЖрд╡рд╛рд╕ рдпреЛрдЬрдирд╛рдПрдВ**: рдкреНрд░рдзрд╛рдирдордВрддреНрд░реА рдЖрд╡рд╛рд╕ рдпреЛрдЬрдирд╛ (PMAY)
ЁЯМ╛ **рдХреГрд╖рд┐ рдпреЛрдЬрдирд╛рдПрдВ**: PM-KISAN рд╕рдореНрдорд╛рди рдирд┐рдзрд┐
ЁЯПе **рд╕реНрд╡рд╛рд╕реНрдереНрдп рдпреЛрдЬрдирд╛рдПрдВ**: рдЖрдпреБрд╖реНрдорд╛рди рднрд╛рд░рдд PM-JAY
ЁЯТ╝ **рд╡реНрдпрд╛рдкрд╛рд░ рдФрд░ рд░реЛрдЬрдЧрд╛рд░**: рдкреНрд░рдзрд╛рдирдордВрддреНрд░реА рдореБрджреНрд░рд╛ рдпреЛрдЬрдирд╛
ЁЯУЪ **рд╢рд┐рдХреНрд╖рд╛ рдпреЛрдЬрдирд╛рдПрдВ**: рдЫрд╛рддреНрд░рд╡реГрддреНрддрд┐ рдХрд╛рд░реНрдпрдХреНрд░рдо

**рдЖрдЬ рдЖрдкрдХреЛ рдХрд┐рд╕ рдЪреАрдЬрд╝ рдореЗрдВ рд╕рд╣рд╛рдпрддрд╛ рдЪрд╛рд╣рд┐рдП?**
рдЖрдк рд╣рд┐рдВрджреА рдореЗрдВ рдореБрдЭрд╕реЗ рдкреВрдЫ рд╕рдХрддреЗ рд╣реИрдВ!""",
                    "action_plan": ["рдЙрдкрд▓рдмреНрдз рдпреЛрдЬрдирд╛рдПрдВ рджреЗрдЦреЗрдВ", "рдкрд╛рддреНрд░рддрд╛ рдЬрд╛рдВрдЪреЗрдВ", "рдЖрд╡реЗрджрди рдорд╛рд░реНрдЧрджрд░реНрд╢рди рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ"],
                    "required_documents": [],
                    "eligible_schemes": [],
                    "next_steps": "рдмрддрд╛рдПрдВ рдХрд┐ рдЖрдкрдХреЛ рдХрд┐рд╕ рд╢реНрд░реЗрдгреА рдореЗрдВ рд░реБрдЪрд┐ рд╣реИ"
                }
            },
            'tamil': {
                'greeting': {
                    "category": "ASK",
                    "intent": "ро╡рогроХрпНроХроорпН",
                    "confidence": 0.9,
                    "language_detected": "tamil",
                    "response": """ЁЯСЛ ро╡рогроХрпНроХроорпН! AGSA-ро╡ро┐ро▓рпН ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒рпЛроорпН - роЙроЩрпНроХро│рпН роЕро░роЪрпБ роЪрпЗро╡рпИ роЙродро╡ро┐ропро╛ро│ро░рпН!

роЕро░роЪрпБ родро┐роЯрпНроЯроЩрпНроХро│рпН рооро▒рпНро▒рпБроорпН роЪрпЗро╡рпИроХро│рпИ navigateроЪрпЖропрпНроп роЙроЩрпНроХро│рпБроХрпНроХрпБ роЙродро╡ роиро╛ройрпН роЗроЩрпНроХрпЗ роЗро░рпБроХрпНроХро┐ро▒рпЗройрпН. роиро╛ройрпН рокро▓ роорпКро┤ро┐роХро│ро┐ро▓рпН роЙродро╡ро┐ ро╡ро┤роЩрпНроХ роорпБроЯро┐ропрпБроорпН.

ЁЯПа **ро╡рпАроЯрпНроЯрпБ ро╡роЪродро┐ родро┐роЯрпНроЯроЩрпНроХро│рпН**: рокро┐ро░родрооро░рпН роЖро╡ро╛ро╕рпН ропрпЛроЬройро╛ (PMAY)  
ЁЯМ╛ **ро╡ро┐ро╡роЪро╛роп родро┐роЯрпНроЯроЩрпНроХро│рпН**: PM-KISAN роЪроорпНрооро╛ройрпН роиро┐родро┐
ЁЯПе **роЪрпБроХро╛родро╛ро░ родро┐роЯрпНроЯроЩрпНроХро│рпН**: роЖропрпБро╖рпНрооро╛ройрпН рокро╛ро░родрпН PM-JAY
ЁЯТ╝ **ро╡рогро┐роХроорпН & ро╡рпЗро▓рпИро╡ро╛ропрпНрокрпНрокрпБ**: рокро┐ро░родрооро░рпН роорпБродрпНро░ро╛ ропрпЛроЬройро╛
ЁЯУЪ **роХро▓рпНро╡ро┐ родро┐роЯрпНроЯроЩрпНроХро│рпН**: роЙродро╡ро┐родрпНродрпКроХрпИ родро┐роЯрпНроЯроЩрпНроХро│рпН

**роЗройрпНро▒рпБ роЙроЩрпНроХро│рпБроХрпНроХрпБ роОройрпНрой роЙродро╡ро┐ родрпЗро╡рпИ?**
роирпАроЩрпНроХро│рпН родрооро┐ро┤ро┐ро▓рпН роОройрпНройро┐роЯроорпН роХрпЗроЯрпНроХро▓ро╛роорпН!""",
                    "action_plan": ["роХро┐роЯрпИроХрпНроХрпБроорпН родро┐роЯрпНроЯроЩрпНроХро│рпИрокрпН рокро╛ро░рпНроХрпНроХро╡рпБроорпН", "родроХрпБродро┐ропрпИ роЪро░ро┐рокро╛ро░рпНроХрпНроХро╡рпБроорпН", "ро╡ро┐рогрпНрогрокрпНрок ро╡ро┤ро┐роХро╛роЯрпНроЯрпБродро▓рпИрокрпН рокрпЖро▒ро╡рпБроорпН"],
                    "required_documents": [],
                    "eligible_schemes": [],
                    "next_steps": "роОроирпНрод рокро┐ро░ро┐ро╡ро┐ро▓рпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роЖро░рпНро╡роорпН роЙро│рпНро│родрпБ роОройрпНро▒рпБ роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН"
                }
            },
            'telugu': {
                'greeting': {
                    "category": "ASK",
                    "intent": "р░ир░ор░╕р▒Нр░Хр░╛р░░р░В", 
                    "confidence": 0.9,
                    "language_detected": "telugu",
                    "response": """ЁЯСЛ р░ир░ор░╕р▒Нр░Хр░╛р░░р░В! AGSA-р░Хр░┐ р░╕р▒Нр░╡р░╛р░Чр░др░В - р░ор▒А р░кр▒Нр░░р░нр▒Бр░др▒Нр░╡ р░╕р▒Зр░╡р░▓ р░╕р░╣р░╛р░пр░Хр▒Бр░бр▒Б!

р░кр▒Нр░░р░нр▒Бр░др▒Нр░╡ р░кр░ер░Хр░╛р░▓р▒Б р░ор░░р░┐р░пр▒Б р░╕р▒Зр░╡р░▓р░ир▒Б navigate р░Ър▒Зр░пр░бр░Вр░▓р▒Л р░ор▒Ар░Хр▒Б р░╕р░╣р░╛р░пр░В р░Ър▒Зр░пр░бр░╛р░ир░┐р░Хр░┐ р░ир▒Зр░ир▒Б р░Зр░Хр▒Нр░Хр░б р░Йр░ир▒Нр░ир░╛р░ир▒Б. р░ир▒Зр░ир▒Б р░Ер░ир▒Зр░Х р░нр░╛р░╖р░▓р░▓р▒Л р░╕р░╣р░╛р░пр░В р░Ер░Вр░жр░┐р░Вр░Ър░Чр░▓р░ир▒Б.

ЁЯПа **р░Чр▒Гр░╣ р░кр░ер░Хр░╛р░▓р▒Б**: р░кр▒Нр░░р░зр░╛р░и р░ор░Вр░др▒Нр░░р░┐ р░Жр░╡р░╛р░╕р▒Н р░пр▒Лр░Ьр░и (PMAY)
ЁЯМ╛ **р░╡р▒Нр░пр░╡р░╕р░╛р░п р░кр░ер░Хр░╛р░▓р▒Б**: PM-KISAN р░╕р░ор▒Нр░ор░╛р░ир▒Н р░ир░┐р░зр░┐  
ЁЯПе **р░Жр░░р▒Лр░Чр▒Нр░п р░кр░ер░Хр░╛р░▓р▒Б**: р░Жр░пр▒Бр░╖р▒Нр░ор░╛р░ир▒Н р░нр░╛р░░р░др▒Н PM-JAY
ЁЯТ╝ **р░╡р▒Нр░пр░╛р░кр░╛р░░р░В & р░Йр░кр░╛р░зр░┐**: р░кр▒Нр░░р░зр░╛р░и р░ор░Вр░др▒Нр░░р░┐ р░ор▒Бр░жр▒Нр░░ р░пр▒Лр░Ьр░и
ЁЯУЪ **р░╡р░┐р░жр▒Нр░пр░╛ р░кр░ер░Хр░╛р░▓р▒Б**: р░╕р▒Нр░Хр░╛р░▓р░░р▒НтАМр░╖р░┐р░кр▒Н р░кр▒Нр░░р▒Лр░Чр▒Нр░░р░╛р░ор▒НтАМр░▓р▒Б

**р░Ир░░р▒Лр░Ьр▒Б р░ор▒Ар░Хр▒Б р░П р░╡р░┐р░зр░ор▒Ир░и р░╕р░╣р░╛р░пр░В р░Хр░╛р░╡р░╛р░▓р░┐?**
р░ор▒Ар░░р▒Б р░др▒Жр░▓р▒Бр░Чр▒Бр░▓р▒Л р░ир░ир▒Нр░ир▒Б р░Ер░бр░Чр░╡р░Ър▒Нр░Ър▒Б!""",
                    "action_plan": ["р░Ер░Вр░жр▒Бр░мр░╛р░Яр▒Бр░▓р▒Л р░Йр░ир▒Нр░и р░кр░ер░Хр░╛р░▓р░ир▒Б р░Ър▒Вр░бр░Вр░бр░┐", "р░Ер░░р▒Нр░╣р░др░ир▒Б р░др░ир░┐р░Цр▒А р░Ър▒Зр░пр░Вр░бр░┐", "р░жр░░р░Цр░╛р░╕р▒Нр░др▒Б р░ор░╛р░░р▒Нр░Чр░жр░░р▒Нр░╢р░Хр░др▒Нр░╡р░В р░кр▒Кр░Вр░жр░Вр░бр░┐"],
                    "required_documents": [],
                    "eligible_schemes": [],
                    "next_steps": "р░ор▒Ар░Хр▒Б р░П р░╡р░┐р░нр░╛р░Чр░Вр░▓р▒Л р░Жр░╕р░Хр▒Нр░др░┐ р░Йр░Вр░жр▒Л р░Ър▒Жр░кр▒Нр░кр░Вр░бр░┐"
                }
            }
        }
        
    def detect_language(self, text: str) -> str:
        """Detect language from user input."""
        text_lower = text.lower()
        
        # Check for language patterns
        for language, patterns in self.language_patterns.items():
            if any(pattern in text for pattern in patterns):
                return language
                
        # Check for English patterns (fallback)
        english_patterns = ['hello', 'hi', 'how', 'what', 'where', 'when', 'help', 'scheme', 'government']
        if any(pattern in text_lower for pattern in english_patterns):
            return 'english'
            
        # Default to English if no language detected
        return 'english'
    
    def _ensure_initialized(self):
        """Ensure the service is initialized before use."""
        if self._initialized:
            return
            
        try:
            from django.conf import settings
            
            api_key = getattr(settings, 'GEMINI_API_KEY', os.getenv('GEMINI_API_KEY'))
            if not api_key:
                logger.warning("GEMINI_API_KEY not found. AI features will be disabled.")
                self.model = None
                self._initialized = True
                return
            
            genai.configure(api_key=api_key)
            
            # Configure for optimal performance with multi-language support
            generation_config = genai.types.GenerationConfig(
                temperature=0.7,  # Slightly higher for better language diversity
                top_p=0.8,
                top_k=40,
                max_output_tokens=512,  # Increased for multi-language responses
                candidate_count=1,
            )
            
            self.request_timeout = 12  # Increased timeout for multi-language processing
            
            self.model = genai.GenerativeModel(
                'gemini-1.5-flash',
                generation_config=generation_config,
                system_instruction=self.system_prompt
            )
            logger.info("Gemini model initialized with multi-language support")
            
        except Exception as e:
            logger.error(f"Failed to initialize Gemini model: {e}")
            self.model = None
            
        self._initialized = True

    def analyze_user_message(self, message: str, user_context: Dict[str, Any] = None) -> Dict[str, Any]:
        """
        Analyze user message in multiple languages and generate appropriate response.
        """
        ai_start_time = time.time()
        ai_timestamp = datetime.now().isoformat()
        
        logger.info(f"[AI_MULTILANG] ===== MULTI-LANGUAGE AI ANALYSIS STARTED =====")
        logger.info(f"[AI_MULTILANG] Started at: {ai_timestamp}")
        logger.info(f"[AI_MULTILANG] Message: {message[:100]}...")
        
        # Step 1: Detect language
        detected_language = self.detect_language(message)
        logger.info(f"[AI_MULTILANG] Detected language: {detected_language}")
        
        # Step 2: Ensure service is initialized
        self._ensure_initialized()
        
        if not self.model:
            logger.warning("[AI_MULTILANG] Gemini model not available, using fallback")
            fallback_result = self._get_multilang_fallback_response(message, detected_language)
            total_duration = (time.time() - ai_start_time) * 1000
            logger.info(f"[AI_MULTILANG] FALLBACK RESPONSE TIME: {total_duration:.2f}ms")
            return fallback_result
        
        try:
            # Step 3: Prepare multi-language prompt
            prompt_start = time.time()
            
            # Enhanced prompt with language instructions
            prompt = f'''User Message: "{message}"

Detected Language: {detected_language}

Instructions:
1. Detect the user's primary language from the message
2. Respond in the SAME language as the user's input
3. If the message is in Bengali, respond in Bengali
4. If the message is in Malayalam, respond in Malayalam  
5. If the message is in Hindi, respond in Hindi
6. If the message is in Tamil, respond in Tamil
7. If the message is in Telugu, respond in Telugu
8. If the message is in English, respond in English

Provide JSON response in the user's language.'''

            prompt_duration = (time.time() - prompt_start) * 1000
            logger.info(f"[AI_MULTILANG] Prompt preparation: {prompt_duration:.2f}ms")
            
            # Step 4: Make Gemini API call with timeout
            api_start = time.time()
            logger.info(f"[AI_MULTILANG] Making Gemini API call for {detected_language}...")
            
            try:
                # Threading approach for timeout
                import threading
                result = [None]
                exception = [None]
                
                def api_call():
                    try:
                        result[0] = self.model.generate_content(prompt)
                    except Exception as e:
                        exception[0] = e
                
                thread = threading.Thread(target=api_call)
                thread.daemon = True
                thread.start()
                thread.join(timeout=15)  # 15 second timeout for multi-language
                
                if thread.is_alive():
                    api_duration = (time.time() - api_start) * 1000
                    logger.error(f"[AI_MULTILANG] API call TIMED OUT after {api_duration:.2f}ms")
                    raise TimeoutError(f"Gemini API call timed out for {detected_language}")
                
                if exception[0]:
                    raise exception[0]
                
                response = result[0]
                if response is None:
                    raise Exception("Gemini API returned None response")
                
                api_duration = (time.time() - api_start) * 1000
                logger.info(f"[AI_MULTILANG] API response received: {api_duration:.2f}ms")
                
            except Exception as e:
                api_duration = (time.time() - api_start) * 1000
                logger.error(f"[AI_MULTILANG] API ERROR after {api_duration:.2f}ms: {e}")
                raise e
            
            # Step 5: Parse response
            parse_start = time.time()
            try:
                response_text = response.text.strip()
                logger.info(f"[AI_MULTILANG] Raw response length: {len(response_text)} characters")
                
                # Handle JSON wrapped in markdown
                if response_text.startswith('```json') and response_text.endswith('```'):
                    response_text = response_text[7:-3].strip()
                elif response_text.startswith('```') and response_text.endswith('```'):
                    response_text = response_text[3:-3].strip()
                
                result = json.loads(response_text)
                
                # Ensure language_detected field is set
                if 'language_detected' not in result:
                    result['language_detected'] = detected_language
                
                parse_duration = (time.time() - parse_start) * 1000
                logger.info(f"[AI_MULTILANG] JSON parsing successful: {parse_duration:.2f}ms")
                
                total_duration = (time.time() - ai_start_time) * 1000
                logger.info(f"[AI_MULTILANG] ===== MULTI-LANGUAGE AI ANALYSIS COMPLETED =====")
                logger.info(f"[AI_MULTILANG] TOTAL TIME: {total_duration:.2f}ms for {detected_language}")
                logger.info(f"[AI_MULTILANG] ======================================================")
                
                return result
                
            except json.JSONDecodeError as e:
                parse_duration = (time.time() - parse_start) * 1000
                logger.warning(f"[AI_MULTILANG] JSON parsing failed: {parse_duration:.2f}ms")
                
                # Wrap non-JSON response
                fallback_result = {
                    "category": "ASK",
                    "intent": "general_inquiry" if detected_language == 'english' else "рж╕рж╛ржзрж╛рж░ржг ржЬрж┐ржЬрзНржЮрж╛рж╕рж╛" if detected_language == 'bengali' else "рд╕рд╛рдорд╛рдиреНрдп рдкреВрдЫрддрд╛рдЫ" if detected_language == 'hindi' else "рж╕рж╛ржзрж╛рж░ржг ржЬрж┐ржЬрзНржЮрж╛рж╕рж╛",
                    "confidence": 0.7,
                    "language_detected": detected_language,
                    "response": response.text.strip(),
                    "action_plan": [],
                    "required_documents": [],
                    "eligible_schemes": [],
                    "next_steps": "Please provide more specific information." if detected_language == 'english' else "ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖрж░ржУ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ рждржерзНржп ржкрзНрж░ржжрж╛ржи ржХрж░рзБржиред" if detected_language == 'bengali' else "рдХреГрдкрдпрд╛ рдЕрдзрд┐рдХ рд╡рд┐рд╢рд┐рд╖реНрдЯ рдЬрд╛рдирдХрд╛рд░реА рдкреНрд░рджрд╛рди рдХрд░реЗрдВред" if detected_language == 'hindi' else "Please provide more specific information."
                }
                
                total_duration = (time.time() - ai_start_time) * 1000
                logger.info(f"[AI_MULTILANG] FALLBACK RESPONSE TIME: {total_duration:.2f}ms")
                return fallback_result
                
        except Exception as e:
            error_duration = (time.time() - ai_start_time) * 1000
            logger.error(f"[AI_MULTILANG] Error after {error_duration:.2f}ms: {e}")
            return self._get_multilang_fallback_response(message, detected_language)

    def _get_multilang_fallback_response(self, message: str, detected_language: str) -> Dict[str, Any]:
        """Get fallback response in the detected language."""
        message_lower = message.lower().strip()
        
        # Check for greetings in any language
        greeting_patterns = ['hello', 'hi', 'hey', 'start', 'help', 'рж╣рзНржпрж╛рж▓рзЛ', 'рж╣рж╛ржЗ', 'рж╕рж╛рж╣рж╛ржпрзНржп', 
                           'р┤╣р┤▓р╡Л', 'р┤╣р┤╛р┤пр╡Н', 'р┤╕р┤╣р┤╛р┤пр┤В', 'рдирдорд╕реНрддреЗ', 'рд╣реИрд▓реЛ', 'рд╕рд╣рд╛рдпрддрд╛',
                           'ро╡рогроХрпНроХроорпН', 'ро╣ро▓рпЛ', 'роЙродро╡ро┐', 'р░ир░ор░╕р▒Нр░Хр░╛р░░р░В', 'р░╣р░▓р▒Л', 'р░╕р░╣р░╛р░пр░В']
        
        if any(pattern in message_lower for pattern in greeting_patterns):
            # Return greeting response in detected language
            if detected_language in self.fallback_responses:
                return self.fallback_responses[detected_language]['greeting']
            else:
                return self.fallback_responses['english']['greeting']
        
        # Default fallback for unrecognized queries
        if detected_language == 'bengali':
            return {
                "category": "ASK",
                "intent": "рж╕рж╛ржзрж╛рж░ржг ржЬрж┐ржЬрзНржЮрж╛рж╕рж╛",
                "confidence": 0.7,
                "language_detected": "bengali",
                "response": "ржжрзБржГржЦрж┐ржд, ржЖржорж┐ ржмрж░рзНрждржорж╛ржирзЗ AI рж╕рзЗржмрж╛ рж╕ржВржпрзЛржЧ ржХрж░рждрзЗ ржкрж╛рж░ржЫрж┐ ржирж╛ред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржкрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред рждрж╛рзОржХрзНрж╖ржгрж┐ржХ рж╕рж╛рж╣рж╛ржпрзНржпрзЗрж░ ржЬржирзНржп, рж╕рж╛ржкрзЛрж░рзНржЯрзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржиред",
                "action_plan": [],
                "required_documents": [],
                "eligible_schemes": [],
                "next_steps": "AI рж╕рзЗржмрж╛ ржЙржкрж▓ржмрзНржз рж╣рж▓рзЗ ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред"
            }
        elif detected_language == 'malayalam':
            return {
                "category": "ASK", 
                "intent": "р┤кр╡Кр┤др╡Б р┤Ер┤ир╡Нр┤╡р╡Зр┤╖р┤гр┤В",
                "confidence": 0.7,
                "language_detected": "malayalam",
                "response": "р┤Хр╡Нр┤╖р┤ор┤┐р┤Хр╡Нр┤Хр┤гр┤В, р┤Ор┤ир┤┐р┤Хр╡Нр┤Хр╡Н р┤Зр┤кр╡Нр┤кр╡Лр╡╛ AI р┤╕р╡Зр┤╡р┤ир┤╡р╡Бр┤ор┤╛р┤пр┤┐ р┤мр┤ир╡Нр┤зр┤кр╡Нр┤кр╡Жр┤Яр┤╛р╡╗ р┤Хр┤┤р┤┐р┤пр╡Бр┤ир╡Нр┤ир┤┐р┤▓р╡Нр┤▓. р┤кр┤┐р┤ир╡Нр┤ир╡Ар┤Яр╡Н р┤╡р╡Ар┤гр╡Нр┤Яр╡Бр┤В р┤╢р╡Нр┤░р┤ор┤┐р┤Хр╡Нр┤Хр╡Бр┤Х. р┤Йр┤Яр┤ир┤Яр┤┐ р┤╕р┤╣р┤╛р┤пр┤др╡Нр┤др┤┐р┤ир╡Н, р┤╕р┤кр╡Нр┤кр╡Лр╡╝р┤Яр╡Нр┤Яр┤┐р┤ир╡Ж р┤мр┤ир╡Нр┤зр┤кр╡Нр┤кр╡Жр┤Яр╡Бр┤Х.",
                "action_plan": [],
                "required_documents": [],
                "eligible_schemes": [],
                "next_steps": "AI р┤╕р╡Зр┤╡р┤ир┤В р┤▓р┤нр╡Нр┤пр┤ор┤╛р┤Хр╡Бр┤ор╡Нр┤кр╡Лр╡╛ р┤жр┤пр┤╡р┤╛р┤пр┤┐ р┤╡р╡Ар┤гр╡Нр┤Яр╡Бр┤В р┤╢р╡Нр┤░р┤ор┤┐р┤Хр╡Нр┤Хр╡Бр┤Х."
            }
        elif detected_language == 'hindi':
            return {
                "category": "ASK",
                "intent": "рд╕рд╛рдорд╛рдиреНрдп рдкреВрдЫрддрд╛рдЫ", 
                "confidence": 0.7,
                "language_detected": "hindi",
                "response": "рдХреНрд╖рдорд╛ рдХрд░реЗрдВ, рдореИрдВ рд╡рд░реНрддрдорд╛рди рдореЗрдВ AI рд╕реЗрд╡рд╛ рд╕реЗ рдХрдиреЗрдХреНрдЯ рдирд╣реАрдВ рд╣реЛ рдкрд╛ рд░рд╣рд╛ рд╣реВрдБред рдХреГрдкрдпрд╛ рдмрд╛рдж рдореЗрдВ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред рддрддреНрдХрд╛рд▓ рд╕рд╣рд╛рдпрддрд╛ рдХреЗ рд▓рд┐рдП, рд╕рдкреЛрд░реНрдЯ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред",
                "action_plan": [],
                "required_documents": [],
                "eligible_schemes": [],
                "next_steps": "рдЬрдм AI рд╕реЗрд╡рд╛ рдЙрдкрд▓рдмреНрдз рд╣реЛ рддреЛ рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред"
            }
        elif detected_language == 'tamil':
            return {
                "category": "ASK",
                "intent": "рокрпКродрпБро╡ро╛рой ро╡ро┐роЪро╛ро░рогрпИ",
                "confidence": 0.7, 
                "language_detected": "tamil",
                "response": "рооройрпНройро┐роХрпНроХро╡рпБроорпН, родро▒рпНрокрпЛродрпБ роиро╛ройрпН AI роЪрпЗро╡рпИропрпБроЯройрпН роЗрогрпИроХрпНроХ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ. рокро┐ройрпНройро░рпН роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐ роЪрпЖропрпНропрпБроЩрпНроХро│рпН. роЙроЯройроЯро┐ роЙродро╡ро┐роХрпНроХрпБ, роЖродро░ро╡рпИродрпН родрпКроЯро░рпНрокрпБ роХрпКро│рпНро│рпБроЩрпНроХро│рпН.",
                "action_plan": [],
                "required_documents": [],
                "eligible_schemes": [],
                "next_steps": "AI роЪрпЗро╡рпИ роХро┐роЯрпИроХрпНроХрпБроорпН рокрпЛродрпБ родропро╡рпБроЪрпЖропрпНродрпБ роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН."
            }
        elif detected_language == 'telugu':
            return {
                "category": "ASK",
                "intent": "р░╕р░╛р░зр░╛р░░р░г р░╡р░┐р░Ър░╛р░░р░г",
                "confidence": 0.7,
                "language_detected": "telugu", 
                "response": "р░Хр▒Нр░╖р░ор░┐р░Вр░Ър░Вр░бр░┐, р░ир▒Зр░ир▒Б р░кр▒Нр░░р░╕р▒Нр░др▒Бр░др░В AI р░╕р▒Зр░╡р░др▒Л р░Хр░ир▒Жр░Хр▒Нр░Яр▒Н р░Ър▒Зр░пр░▓р▒Зр░Хр░кр▒Лр░др▒Бр░ир▒Нр░ир░╛р░ир▒Б. р░жр░пр░Ър▒Зр░╕р░┐ р░др░░р▒Нр░╡р░╛р░д р░ор░│р▒Нр░▓р▒А р░кр▒Нр░░р░пр░др▒Нр░ир░┐р░Вр░Ър░Вр░бр░┐. р░др░Хр▒Нр░╖р░г р░╕р░╣р░╛р░пр░В р░Хр▒Лр░╕р░В, р░╕р░кр▒Лр░░р▒Нр░Яр▒НтАМр░ир░┐ р░╕р░Вр░кр▒Нр░░р░жр░┐р░Вр░Ър░Вр░бр░┐.",
                "action_plan": [],
                "required_documents": [],
                "eligible_schemes": [],
                "next_steps": "AI р░╕р▒Зр░╡ р░Ер░Вр░жр▒Бр░мр░╛р░Яр▒Бр░▓р▒Л р░Йр░ир▒Нр░ир░кр▒Нр░кр▒Бр░бр▒Б р░жр░пр░Ър▒Зр░╕р░┐ р░ор░│р▒Нр░▓р▒А р░кр▒Нр░░р░пр░др▒Нр░ир░┐р░Вр░Ър░Вр░бр░┐."
            }
        else:  # Default to English
            return {
                "category": "ASK",
                "intent": "general_inquiry",
                "confidence": 0.7,
                "language_detected": "english",
                "response": "I'm currently unable to connect to the AI service. Please check your internet connection or try again later. For immediate assistance, please contact support.",
                "action_plan": [],
                "required_documents": [],
                "eligible_schemes": [],
                "next_steps": "Please try again later when the AI service is available."
            }

    def generate_multilang_form_assistance(self, scheme_name: str, user_data: Dict[str, Any], language: str = 'english') -> Dict[str, Any]:
        """Generate form filling assistance in specified language."""
        if not self.model:
            return self._fallback_form_assistance_multilang(scheme_name, language)
        
        try:
            # Language-specific prompts
            language_prompts = {
                'english': f'Help fill out the application form for "{scheme_name}" in English.',
                'bengali': f'"{scheme_name}" ржПрж░ ржЬржирзНржп ржЖржмрзЗржжржи ржлрж░ржо ржкрзВрж░ржгрзЗ ржмрж╛ржВрж▓рж╛ржпрж╝ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рзБржиред',
                'malayalam': f'"{scheme_name}" р┤Ор┤ир╡Нр┤и р┤кр┤жр╡Нржзр┤др┤┐р┤Хр╡Нр┤Хр┤╛р┤пр╡Бр┤│р╡Нр┤│ р┤Ер┤кр╡Зр┤Хр╡Нр┤╖р┤╛ р┤лр╡Лр┤В р┤ор┤▓р┤пр┤╛р┤│р┤др╡Нр┤др┤┐р╡╜ р┤кр╡Вр┤░р┤┐р┤кр╡Нр┤кр┤┐р┤Хр╡Нр┤Хр┤╛р╡╗ р┤╕р┤╣р┤╛р┤пр┤┐р┤Хр╡Нр┤Хр╡Бр┤Хред',
                'hindi': f'"{scheme_name}" рдХреЗ рд▓рд┐рдП рдЖрд╡реЗрджрди рдлреЙрд░реНрдо рднрд░рдиреЗ рдореЗрдВ рд╣рд┐рдВрджреА рдореЗрдВ рд╕рд╣рд╛рдпрддрд╛ рдХрд░реЗрдВред',
                'tamil': f'"{scheme_name}" роХрпНроХро╛рой ро╡ро┐рогрпНрогрокрпНрок рокроЯро┐ро╡родрпНродрпИ родрооро┐ро┤ро┐ро▓рпН роиро┐ро░рокрпНрок роЙродро╡рпБроЩрпНроХро│рпНред',
                'telugu': f'"{scheme_name}" р░Хр▒Лр░╕р░В р░жр░░р░Цр░╛р░╕р▒Нр░др▒Б р░лр░╛р░░р░В р░др▒Жр░▓р▒Бр░Чр▒Бр░▓р▒Л р░кр▒Вр░░р░┐р░Вр░Ър░бр░Вр░▓р▒Л р░╕р░╣р░╛р░пр░В р░Ър▒Зр░пр░Вр░бр░┐ред'
            }
            
            prompt = f"""{language_prompts.get(language, language_prompts['english'])}

User Data Available:
{json.dumps(user_data, indent=2)}

Respond in {language} language with JSON format containing:
- pre_filled_data: Fields that can be pre-filled
- missing_fields: Information still needed  
- completion_steps: Step-by-step guidance
- warnings: Important notes and common mistakes
- documents_required: Required supporting documents

All content should be in {language} language."""

            response = self.model.generate_content(prompt)
            
            try:
                return json.loads(response.text)
            except json.JSONDecodeError:
                return self._fallback_form_assistance_multilang(scheme_name, language)
                
        except Exception as e:
            logger.error(f"Error in multilang form assistance: {e}")
            return self._fallback_form_assistance_multilang(scheme_name, language)

    def _fallback_form_assistance_multilang(self, scheme_name: str, language: str = 'english') -> Dict[str, Any]:
        """Fallback form assistance in multiple languages."""
        messages = {
            'english': f"Form assistance for {scheme_name} is currently unavailable. Please try again later.",
            'bengali': f"{scheme_name} ржПрж░ ржЬржирзНржп ржлрж░рзНржо рж╕рж╣рж╛ржпрж╝рждрж╛ ржмрж░рзНрждржорж╛ржирзЗ ржЙржкрж▓ржмрзНржз ржиржпрж╝ред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржкрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред",
            'malayalam': f"{scheme_name} р┤Ор┤ир╡Нр┤ир┤др┤┐р┤ир╡Бр┤│р╡Нр┤│ р┤лр╡Лр┤В р┤╕р┤╣р┤╛р┤пр┤В р┤ир┤┐р┤▓р┤╡р┤┐р╡╜ р┤▓р┤нр╡Нр┤пр┤ор┤▓р╡Нр┤▓. р┤кр┤┐р┤ир╡Нр┤ир╡Ар┤Яр╡Н р┤╡р╡Ар┤гр╡Нр┤Яр╡Бр┤В р┤╢р╡Нр┤░р┤ор┤┐р┤Хр╡Нр┤Хр╡Бр┤Х.",
            'hindi': f"{scheme_name} рдХреЗ рд▓рд┐рдП рдлреЙрд░реНрдо рд╕рд╣рд╛рдпрддрд╛ рд╡рд░реНрддрдорд╛рди рдореЗрдВ рдЕрдиреБрдкрд▓рдмреНрдз рд╣реИред рдХреГрдкрдпрд╛ рдмрд╛рдж рдореЗрдВ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред",
            'tamil': f"{scheme_name} роХрпНроХро╛рой рокроЯро┐ро╡ роЙродро╡ро┐ родро▒рпНрокрпЛродрпБ роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ. рокро┐ройрпНройро░рпН роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐ роЪрпЖропрпНропрпБроЩрпНроХро│рпН.",
            'telugu': f"{scheme_name} р░Хр▒Лр░╕р░В р░лр░╛р░░р░В р░╕р░╣р░╛р░пр░В р░кр▒Нр░░р░╕р▒Нр░др▒Бр░др░В р░Ер░Вр░жр▒Бр░мр░╛р░Яр▒Бр░▓р▒Л р░▓р▒Зр░жр▒Б. р░жр░пр░Ър▒Зр░╕р░┐ р░др░░р▒Нр░╡р░╛р░д р░ор░│р▒Нр░▓р▒А р░кр▒Нр░░р░пр░др▒Нр░ир░┐р░Вр░Ър░Вр░бр░┐."
        }
        
        return {
            "error": "AI service unavailable",
            "message": messages.get(language, messages['english']),
            "pre_filled_data": {},
            "missing_fields": [],
            "completion_steps": [],
            "warnings": [],
            "documents_required": []
        }


# Global instance
gemini_multilang_service = MultiLangGeminiChatService()
# For backward compatibility
gemini_service = gemini_multilang_service



# Example usage function for testing
def test_multilang_service():
    """Test function to demonstrate multi-language capabilities."""
    
    test_messages = [
        "Hello, what are you?",  # English
        "рж╣рзНржпрж╛рж▓рзЛ, ржЖржкржирж┐ ржХрж┐?",  # Bengali
        "р┤╣р┤▓р╡Л, р┤ир┤┐р┤Щр╡Нр┤Щр╡╛ р┤Ор┤ир╡Нр┤др┤╛р┤гр╡Н?",  # Malayalam  
        "рдирдорд╕реНрддреЗ, рдЖрдк рдХреНрдпрд╛ рд╣реИрдВ?",  # Hindi
        "ро╡рогроХрпНроХроорпН, роирпАроЩрпНроХро│рпН роОройрпНрой?",  # Tamil
        "р░╣р░▓р▒Л, р░ор▒Ар░░р▒Б р░Пр░ор░┐р░Яр░┐?"  # Telugu
    ]
    
    for message in test_messages:
        print(f"\n--- Testing: {message} ---")
        result = gemini_multilang_service.analyze_user_message(message)
        print(f"Language detected: {result.get('language_detected', 'unknown')}")
        print(f"Response: {result.get('response', 'No response')[:100]}...")
        print("---")


if __name__ == "__main__":
    # Run test if script is executed directly
    test_multilang_service() 